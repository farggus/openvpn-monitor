<!DOCTYPE html>

<html lang="ru">
<head>
<meta charset="utf-8"/>
<title>OpenVPN Management panel</title>
<meta content="width=device-width, initial-scale=1" name="viewport"/>
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet"/>
<link href="https://unpkg.com/leaflet/dist/leaflet.css" rel="stylesheet">
</link></head>
<body class="bg-light">
<div class="container mt-5">
<div>
</div>
<button class="btn btn-outline-secondary" id="themeToggle">Switch Theme</button>
</div>
<div class="container mt-5">
<h2>OpenVPN - Server</h2>
<div class="table-responsive"><table class="table-bordered text-nowrap table table-sm" id="server-status-table">
<thead class="table-light">
<tr>
<th>VPN Mode</th><th>Status</th><th>Pingable</th><th>Clients</th>
<th>Total Bytes In</th><th>Total Bytes Out</th><th>Up Since</th>
<th>Local IP</th><th>Public IP</th>
</tr>
</thead>
<tbody id="server-status-body"><tr><td colspan="9">Loading...</td></tr></tbody>
</table></div>
<h2 class="mb-4">OpenVPN - Clients</h2>
<div class="table-responsive"><table class="table-bordered table table-hover text-nowrap table-sm">
<thead class="table-light">
<tr>
<th>Client</th><th>VPN IP</th><th>Client IP</th><th>Port</th>
<th>Session Opened</th><th>Time Online</th><th>Speed (Rx / Tx)</th>
<th>Bytes Received</th><th>Bytes Sent</th>
</tr>
</thead>
<tbody id="vpn-clients-body"></tbody>
<tfoot class="table-light">
<tr>
<th colspan="7">Total</th>
<th id="total-received">0 MB</th>
<th id="total-sent">0 MB</th>
</tr>
</tfoot>
</table></div>
<div class="d-flex justify-content-between align-items-center mb-3">
<div>
<button class="btn btn-outline-primary me-2" id="toggleGraphBtn">Charts</button>
<button class="btn btn-outline-primary me-2" id="toggleMapBtn">Map View</button>
<button class="btn btn-outline-secondary" id="historyBtn">Connection history</button>
</div>
</div>


<div class="mt-5" id="graph-section" style="display: none;">
<h2>Traffic Graph (MB/s)</h2>
<canvas class="w-100" height="100" id="trafficChart"></canvas>
</div>

<div class="mb-4" id="map-section" style="display:none;">
<h2>Client Locations</h2>
<div id="map" style="height: 400px;"></div>
</div>  

<!-- НОВЫЙ ОБЪЕДИНЁННЫЙ БЛОК ДЛЯ ГРАФИКА И КАРТЫ 
<div class="d-flex flex-wrap justify-content-between gap-3 mb-5" id="visual-section">
  <div id="graph-subsection" class="flex-fill" style="min-width: 300px; flex: 1;">
    <h2>Traffic Graph (MB/s)</h2>
    <canvas id="trafficChart" style="width: 100%; height: 300px;"></canvas>
  </div>
  <div id="map-subsection" class="flex-fill" style="min-width: 300px; flex: 1;">
    <h2>Client Locations</h2>
    <div id="map" style="height: 300px;"></div>
  </div>
</div>
<!-- /НОВЫЙ ОБЪЕДИНЁННЫЙ БЛОК -->

  
</div>
<div aria-hidden="true" class="modal fade" id="historyModal" tabindex="-1">
<div class="modal-dialog modal-xl modal-dialog-scrollable modal-fullscreen-sm-down">
<div class="modal-content">
<div class="modal-header">
<h5 class="modal-title">Connection history</h5>
<button aria-label="Закрыть" class="btn-close" data-bs-dismiss="modal" type="button"></button>
</div>
<div class="modal-body">
<div class="d-flex align-items-end justify-content-start gap-3 mb-3">
<div>
<label class="form-label" for="filterDate">Date</label>
<input class="form-control" id="filterDate" type="date"/>
</div>
<div>
<label class="form-label" for="filterUser">Client</label>
<input class="form-control" id="filterUser" list="userList" type="text"/>
<datalist id="userList"></datalist>
</div>
<div class="ms-auto">
<button class="btn btn-outline-secondary" id="resetFilters">Clear filter</button>
</div>
</div>
<div class="table-responsive"><table class="table-bordered text-nowrap table table-sm">
<thead class="table-light">
<tr>
<th>Session Opened</th><th>Client</th><th>VPN IP</th><th>Client IP</th>
<th>Port</th><th>Session Closed</th><th>Duration</th><th>Rx (MB)</th><th>Tx (MB)</th>
</tr>
</thead>
<tbody id="history-body"></tbody>
</table></div>
</div>
</div>
</div>
</div>
<!-- Подключение скриптов -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
<!-- Весь JavaScript -->
<script>
// ПЕРЕМЕННЫЕ
let lastStats = {};
let chart = null;
let chartData = { labels: [], datasets: [] };
let fullHistoryData = [];
let mapInitialized = false;
let mapInstance;
let mapMarkers = [];
const geoCache = {};

// ИНИЦИАЛИЗАЦИЯ
document.addEventListener("DOMContentLoaded", function () {
  fetchData();
  setInterval(fetchData, 2000);
  fetchServerStatus();
  setInterval(fetchServerStatus, 3000);

  document.getElementById("toggleGraphBtn").addEventListener("click", () => {
    const graphSection = document.getElementById("graph-section");
    graphSection.style.display = graphSection.style.display === "none" ? "block" : "none";
  });

  document.getElementById("toggleMapBtn").addEventListener("click", () => {
    const section = document.getElementById("map-section");
    const shown = section.style.display === "block";
    section.style.display = shown ? "none" : "block";
    
/* // Modified block
  document.getElementById("toggleGraphBtn").addEventListener("click", () => {
  const graphSection = document.getElementById("graph-subsection");
  graphSection.style.display = graphSection.style.display === "none" ? "block" : "none";
});

document.getElementById("toggleMapBtn").addEventListener("click", () => {
  const mapSection = document.getElementById("map-subsection");
  const shown = mapSection.style.display === "block";
  mapSection.style.display = shown ? "none" : "block";

  if (!mapInitialized && !shown) {
    mapInstance = L.map('map').setView([20, 0], 2);
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
      attribution: 'Map data © OpenStreetMap contributors'
    }).addTo(mapInstance);
    mapInitialized = true;
  }
  if (!shown) loadClientMarkers();
}); */

  
  
  if (!mapInitialized && !shown) {
      mapInstance = L.map('map').setView([20, 0], 2);
      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: 'Map data © OpenStreetMap contributors'
      }).addTo(mapInstance);
      mapInitialized = true;
    }
    if (!shown) loadClientMarkers();
  });
  
  document.getElementById("themeToggle").addEventListener("click", toggleTheme);

  document.getElementById("historyBtn").addEventListener("click", () => {
    $.getJSON("/api/history", function (entries) {
      if (!Array.isArray(entries)) return alert("Ошибка: " + (entries.error || "Не удалось загрузить историю"));
      fullHistoryData = entries.filter(e => e.rx !== null && e.tx !== null);
      const names = [...new Set(fullHistoryData.map(e => e.name))];
      document.getElementById("userList").innerHTML = names.map(n => `<option value="${n}">`).join("");
      document.getElementById("filterDate").value = new Date().toISOString().split('T')[0];
      applyFilters();
      new bootstrap.Modal(document.getElementById('historyModal')).show();
    }).fail(() => alert("Ошибка при запросе к серверу"));
  });

  document.getElementById("filterDate").addEventListener("input", applyFilters);
  document.getElementById("filterUser").addEventListener("input", applyFilters);
  document.getElementById("resetFilters").addEventListener("click", () => {
    document.getElementById("filterDate").value = "";
    document.getElementById("filterUser").value = "";
    renderHistoryTable(fullHistoryData);
  });
});

// ФУНКЦИИ
function toggleTheme() {
  const isDark = document.body.classList.contains("bg-dark");
  const toggle = (sel, darkClass, lightClass) => {
    document.querySelectorAll(sel).forEach(el => {
      el.classList.toggle(darkClass, !isDark);
      el.classList.toggle(lightClass, isDark);
    });
  };

  document.body.classList.toggle("bg-dark", !isDark);
  document.body.classList.toggle("bg-light", isDark);

  toggle("table", "table-dark", "table-light");
  toggle("thead", "table-dark", "table-light");
  toggle("tfoot", "table-dark", "table-light");

  // Таблицы и модалки
  toggle(".modal-content, .modal-header, .modal-body", "bg-dark", "bg-light");
  toggle(".modal-content, .modal-header, .modal-body", "text-light", "text-dark");

  // Текстовые заголовки и подписи
  toggle("h1, h2, h3, h4, h5, h6, th, label, button", "text-light", "text-dark");

  // Инпуты и выпадашки
  toggle("input, select, textarea", "bg-dark", "bg-light");
  toggle("input, select, textarea", "text-light", "text-dark");
  toggle("input, select, textarea", "border-light", "border-dark");

  // Выпадающие списки, календарь
  setTimeout(() => {
    toggle(".dropdown-menu, .select2-dropdown, datalist, .datepicker, .flatpickr-calendar, .ui-datepicker", "bg-dark", "bg-light");
    toggle(".dropdown-menu, .select2-dropdown, datalist, .datepicker, .flatpickr-calendar, .ui-datepicker", "text-light", "text-dark");
  }, 100);
}


function formatUptime(uptimeStr) {
  const uptime = new Date(uptimeStr);
  const now = new Date();
  const diffMs = now - uptime;
  if (isNaN(uptime.getTime()) || diffMs < 0) return "Unknown";
  const minutes = Math.floor(diffMs / 60000);
  const hours = Math.floor(minutes / 60);
  const days = Math.floor(hours / 24);
  return `${days > 0 ? days + "d " : ""}${hours % 24}h ${minutes % 60}m`;
}

function fetchServerStatus() {
  fetch("/api/server-status")
    .then(r => r.json())
    .then(data => {
      const row = `<tr>
        <td>${data.mode}</td><td>${data.status}</td><td>${data.pingable}</td>
        <td>${data.clients}</td><td>${data.total_rx} MB</td><td>${data.total_tx} MB</td>
        <td>${formatUptime(data.uptime)}</td><td>${data.local_ip}</td><td>${data.public_ip}</td>
      </tr>`;
      document.getElementById("server-status-body").innerHTML = row;
    });
}

function loadClientMarkers() {
  console.log("Загрузка клиентов...");
  mapMarkers.forEach(m => mapInstance.removeLayer(m));
  mapMarkers = [];

  fetch("/api/clients")
    .then(res => res.json())
    .then(data => {
      const clients = data.clients;
      const bounds = [];

      clients.forEach(c => {
        const ip = c.real_ip;
        if (!ip) return;

        // Кэш есть — используем сразу
        if (geoCache[ip]) {
          addMarker(geoCache[ip], c, bounds);
        } else {
          // Кэша нет — запрашиваем
          fetch(`https://ipapi.co/${ip}/json/`)
            .then(res => res.json())
            .then(loc => {
              if (!loc.latitude || !loc.longitude) return;
              geoCache[ip] = loc;
              addMarker(loc, c, bounds);
            })
            .catch(err => console.error("Geo fetch error:", err));
        }
      });
    });
}


function addMarker(loc, client, bounds) {
  const marker = L.marker([loc.latitude, loc.longitude])
    .addTo(mapInstance)
    .bindPopup(`<strong>${client.common_name}</strong><br>${loc.city}, ${loc.country_name}`);
  mapMarkers.push(marker);
  bounds.push([loc.latitude, loc.longitude]);
  mapInstance.fitBounds(bounds, { padding: [30, 30] });
}


function applyFilters() {
  const dateFilter = document.getElementById("filterDate").value;
  const userFilter = document.getElementById("filterUser").value.toLowerCase();
  const filtered = fullHistoryData.filter(e =>
    (!dateFilter || e.timestamp.startsWith(dateFilter)) &&
    (!userFilter || e.name.toLowerCase().includes(userFilter))
  );
  renderHistoryTable(filtered);
}

function renderHistoryTable(data) {
  const rows = data.map(e => `
    <tr>
      <td>${e.timestamp}</td><td>${e.name}</td><td>${e.vpn_ip ?? ""}</td><td>${e.ip}</td>
      <td>${e.port ?? ""}</td><td>${e.session_end ?? ""}</td>
      <td>${e.duration ?? ""}</td><td>${e.rx ?? ""}</td><td>${e.tx ?? ""}</td>
    </tr>
  `).join("");
  document.getElementById("history-body").innerHTML = rows;
}

function fetchData() {
  $.getJSON("/api/clients", function(data) {
    const now = Date.now();
    const timeLabel = new Date().toLocaleTimeString();
    let total_received = 0, total_sent = 0;
    let users = data.clients.map(c => c.common_name);

    if (!chart || chartData.datasets.length !== users.length * 2) {
      if (chart) chart.destroy();
      chartData = { labels: [], datasets: [] };
      const colors = ['red', 'blue', 'green', 'orange', 'purple', 'brown'];
      users.forEach((user, i) => {
        chartData.datasets.push(
          { label: `${user} Rx`, data: [], borderColor: colors[i % colors.length], fill: false },
          { label: `${user} Tx`, data: [], borderColor: colors[(i + 1) % colors.length], borderDash: [5,5], fill: false }
        );
      });
      chart = new Chart(document.getElementById('trafficChart'), {
        type: 'line',
        data: chartData,
        options: { responsive: true, animation: false }
      });
    }

    chartData.labels.push(timeLabel);
    if (chartData.labels.length > 20) chartData.labels.shift();

    const datasetMap = Object.fromEntries(chartData.datasets.map(ds => [ds.label, ds.data]));
    const rows = data.clients.map(client => {
      total_received += client.bytes_received;
      total_sent += client.bytes_sent;

      let speed_rx = 0, speed_tx = 0;
      const last = lastStats[client.common_name];
      if (last) {
        const dt = (now - last.timestamp) / 1000;
        speed_rx = (client.bytes_received - last.rx) / dt / 1024 / 1024;
        speed_tx = (client.bytes_sent - last.tx) / dt / 1024 / 1024;
      }

      lastStats[client.common_name] = {
        rx: client.bytes_received,
        tx: client.bytes_sent,
        timestamp: now
      };

      if (datasetMap[`${client.common_name} Rx`]) {
        datasetMap[`${client.common_name} Rx`].push(speed_rx);
        if (datasetMap[`${client.common_name} Rx`].length > 20) datasetMap[`${client.common_name} Rx`].shift();
      }

      if (datasetMap[`${client.common_name} Tx`]) {
        datasetMap[`${client.common_name} Tx`].push(speed_tx);
        if (datasetMap[`${client.common_name} Tx`].length > 20) datasetMap[`${client.common_name} Tx`].shift();
      }

      return `<tr>
        <td>${client.common_name}</td><td>${client.vpn_ip ?? ""}</td><td>${client.real_ip}</td><td>${client.port ?? ""}</td>
        <td>${client.connected_since}</td><td>${client.time_online}</td>
        <td>${speed_rx.toFixed(2)} / ${speed_tx.toFixed(2)} MB/s</td>
        <td>${(client.bytes_received / 1024 / 1024).toFixed(2)} MB</td>
        <td>${(client.bytes_sent / 1024 / 1024).toFixed(2)} MB</td>
      </tr>`;
    }).join("");

    $("#vpn-clients-body").html(rows);
    $("#total-received").text((total_received / 1024 / 1024).toFixed(2) + " MB");
    $("#total-sent").text((total_sent / 1024 / 1024).toFixed(2) + " MB");
    chart.update();
  });
}
</script>
</body>
</html>
