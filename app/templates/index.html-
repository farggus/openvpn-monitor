
<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8">
  <title>OpenVPN Management panel</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
  <script src="https://code.jquery.com/jquery-3.6.0.min.js">
    document.getElementById("themeToggle").addEventListener("click", function () {
      const html = document.querySelector("html");
      const current = document.body.classList.contains("bg-dark");
      document.body.classList.toggle("bg-dark", !current);
      document.body.classList.toggle("bg-light", current);
      const tables = document.querySelectorAll("table");
      tables.forEach(t => {
        t.classList.toggle("table-dark", !current);
        t.classList.toggle("table-light", current);
      });
    });
</script>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
  <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
  <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
</head>
<body class="bg-light">

<div class="container mt-5">


    <h2>OpenVPN - Server</h2>
    <table class="table table-sm table-bordered" id="server-status-table">
      <thead class="table-light">
        <tr>
          <th>VPN Mode</th>
          <th>Status</th>
          <th>Pingable</th>
          <th>Clients</th>
          <th>Total Bytes In</th>
          <th>Total Bytes Out</th>
          <th>Up Since</th>
          <th>Local IP Address</th>
          <th>Public IP Address</th>
        </tr>
      </thead>
      <tbody id="server-status-body">
        <tr>
          <td colspan="9">Loading...</td>
        </tr>
      </tbody>
    </table>


  <h2 class="mb-4">OpenVPN - Clients</h2>
<!--
  <div class="mb-3">
    <button class="btn btn-outline-primary me-2" id="toggleGraphBtn">Charts</button>
    <button class="btn btn-outline-secondary" id="historyBtn">Connection history</button>
    <button class="btn btn-outline-secondary ms-2" id="themeToggle">Switch Theme</button>
  </div>
-->

  <div class="d-flex justify-content-between align-items-center mb-3">
    <div>
      <button class="btn btn-outline-primary me-2" id="toggleGraphBtn">Charts</button>
      <button class="btn btn-outline-primary me-2" id="toggleMapBtn">Map View</button>
      <button class="btn btn-outline-secondary" id="historyBtn">Connection history</button>
    </div>
    <button class="btn btn-outline-secondary" id="themeToggle">Switch Theme</button>
  </div>


  <table class="table table-bordered table-hover">
    <thead class="table-light">
      <tr>
        <th>Client</th>
        <th>VPN IP</th>
        <th>Client IP</th>
        <th>Port</th>
   <!-- <th>Bytes Received</th>
        <th>Bytes Sent</th> -->
        <th>Session Opened</th>
        <th>Time Online</th>
        <th>Speed (Rx / Tx)</th>
        <th>Bytes Received</th>
        <th>Bytes Sent</th>

      </tr>
    </thead>
    <tbody id="vpn-clients-body"></tbody>
    <tfoot class="table-light">
      <tr>
        <th colspan="7">Total</th>
        <th id="total-received">0 MB</th>
        <th id="total-sent">0 MB</th>
 <!--   <th colspan="0"></th>  -->
      </tr>
    </tfoot>
  </table>

  <div class="mt-5" id="graph-section" style="display: none;">
    <h2>Traffic Graph (MB/s)</h2>
    <canvas id="trafficChart" class="w-100" height="100"></canvas>
  </div>

  <!-- Карта -->
  <div id="map-section" class="mb-4" style="display:none;">
    <h2>Client Locations</h2>
    <div id="map" style="height: 400px;"></div>
  </div>

</div>

<!-- История подключений -->
<div class="modal fade" id="historyModal" tabindex="-1" aria-hidden="true">
  <div class="modal-dialog modal-xl modal-dialog-scrollable">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Connection history</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Закрыть"></button>
      </div>
      <div class="modal-body">
        <div class="d-flex align-items-end justify-content-start gap-3 mb-3">
          <div>
            <label for="filterDate" class="form-label">Date</label>
            <input type="date" class="="form-control" id="filterDate">
          </div>
          <div>
            <label for="filterUser" class="form-label">Client</label>
            <input type="text" class="form-control" id="filterUser" list="userList">
            <datalist id="userList"></datalist>
          </div>
          <div class="ms-auto">
            <button id="resetFilters" class="btn btn-outline-secondary">Clear filter</button>
          </div>
        </div>

        <table class="table table-sm table-bordered">
          <thead class="table-light">
            <tr>
              <th>Session Opened</th>
              <th>Client</th>
              <th>VPN IP</th>
              <th>Client IP</th>
              <th>Port</th>
              <th>Session Closed</th>
              <th>Duration</th>
              <th>Rx (MB)</th>
              <th>Tx (MB)</th>
            </tr>
          </thead>
          <tbody id="history-body"></tbody>
        </table>
      </div>
    </div>
  </div>
</div>

<script>
  let lastStats = {};
  let chart = null;
  let chartData = { labels: [], datasets: [] };
  let fullHistoryData = [];

  function createChart(users) {
    const colors = ['red', 'blue', 'green', 'orange', 'purple', 'brown'];
    chartData.datasets = [];
    users.forEach((user, index) => {
      chartData.datasets.push(
        {
          label: `${user} Rx`,
          data: [],
          borderColor: colors[index % colors.length],
          fill: false,
        },
        {
          label: `${user} Tx`,
          data: [],
          borderColor: colors[(index + 1) % colors.length],
          borderDash: [5, 5],
          fill: false,
        }
      );
    });
    const ctx = document.getElementById('trafficChart').getContext('2d');
    chart = new Chart(ctx, {
      type: 'line',
      data: chartData,
      options: {
        animation: false,
        responsive: true,
        scales: {
          x: { title: { display: true, text: 'Time' } },
          y: { title: { display: true, text: 'Speed (MB/s)' }, beginAtZero: true }
        }
      }
    });
  }

  function fetchData() {
    $.getJSON("/api/clients", function(data) {
      let rows = '';
      let total_received = 0;
      let total_sent = 0;
      let now = Date.now();
      let timeLabel = new Date().toLocaleTimeString();

      let users = data.clients.map(c => c.common_name);
      if (!chart || chartData.datasets.length !== users.length * 2) {
        if (chart) chart.destroy();
        createChart(users);
      }

      chartData.labels.push(timeLabel);
      if (chartData.labels.length > 20) chartData.labels.shift();

      let datasetMap = {};
      chartData.datasets.forEach(ds => {
        if (!ds.data) ds.data = [];
        datasetMap[ds.label] = ds.data;
      });

      data.clients.forEach(function(client) {
        total_received += client.bytes_received;
        total_sent += client.bytes_sent;

        let speed_rx = 0;
        let speed_tx = 0;
        if (lastStats[client.common_name]) {
          let deltaTime = (now - lastStats[client.common_name].timestamp) / 1000;
          let deltaRx = client.bytes_received - lastStats[client.common_name].rx;
          let deltaTx = client.bytes_sent - lastStats[client.common_name].tx;
          if (deltaTime > 0) {
            speed_rx = deltaRx / deltaTime / (1024 * 1024);
            speed_tx = deltaTx / deltaTime / (1024 * 1024);
          }
        }
        lastStats[client.common_name] = {
          rx: client.bytes_received,
          tx: client.bytes_sent,
          timestamp: now
        };

        rows += `<tr>
          <td>${client.common_name}</td>
          <td>${client.vpn_ip ?? ""}</td>
          <td>${client.real_ip}</td>
          <td>${client.port ?? ""}</td>
  <!--    <td>${(client.bytes_received / (1024*1024)).toFixed(2)} MB</td>
          <td>${(client.bytes_sent / (1024*1024)).toFixed(2)} MB</td>     -->
          <td>${client.connected_since}</td>
          <td>${client.time_online}</td>
          <td>${speed_rx.toFixed(2)} / ${speed_tx.toFixed(2)} MB/s</td>
          <td>${(client.bytes_received / (1024*1024)).toFixed(2)} MB</td>
          <td>${(client.bytes_sent / (1024*1024)).toFixed(2)} MB</td>

        </tr>`;

        if (datasetMap[`${client.common_name} Rx`]) {
          datasetMap[`${client.common_name} Rx`].push(speed_rx);
          if (datasetMap[`${client.common_name} Rx`].length > 20) datasetMap[`${client.common_name} Rx`].shift();
        }
        if (datasetMap[`${client.common_name} Tx`]) {
          datasetMap[`${client.common_name} Tx`].push(speed_tx);
          if (datasetMap[`${client.common_name} Tx`].length > 20) datasetMap[`${client.common_name} Tx`].shift();
        }
      });

      $("#vpn-clients-body").html(rows);
      $("#total-received").text((total_received / (1024*1024)).toFixed(2) + " MB");
      $("#total-sent").text((total_sent / (1024*1024)).toFixed(2) + " MB");

      chart.update();
    });
  }

  function renderHistoryTable(filtered) {
    let rows = "";
    filtered.forEach(e => {
      rows += `<tr>
        <td>${e.timestamp}</td>
        <td>${e.name}</td>
        <td>${e.vpn_ip ?? ""}</td>
        <td>${e.ip}</td>
<!--    <td>${e.vpn_ip ?? ""}</td> -->
        <td>${e.port ?? ""}</td>
        <td>${e.session_end ?? ""}</td>
        <td>${e.duration ?? ""}</td>
        <td>${e.rx ?? ""}</td>
        <td>${e.tx ?? ""}</td>
      </tr>`;
    });
    $("#history-body").html(rows);
  }

  function applyFilters() {
    const dateFilter = document.getElementById("filterDate").value;
    const userFilter = document.getElementById("filterUser").value.toLowerCase();
    const filtered = fullHistoryData.filter(e => {
      const matchDate = !dateFilter || e.timestamp.startsWith(dateFilter);
      const matchUser = !userFilter || e.name.toLowerCase().includes(userFilter);
      return matchDate && matchUser;
    });
    renderHistoryTable(filtered);
  }

  document.addEventListener("DOMContentLoaded", function () {
    fetchData();
    setInterval(fetchData, 500);


    document.getElementById("historyModal").addEventListener("hide.bs.modal", function () {
      if (document.activeElement) {
        document.activeElement.blur();
      }
    });

    document.getElementById("toggleGraphBtn").addEventListener("click", function () {
      const graphSection = document.getElementById("graph-section");
      graphSection.style.display = graphSection.style.display === "none" ? "block" : "none";
    });

    document.getElementById("historyBtn").addEventListener("click", function () {
      $.getJSON("/api/history", function (entries) {
        if (!Array.isArray(entries)) {
          alert("Ошибка: " + (entries.error || "Не удалось загрузить историю"));
          return;
        }

        fullHistoryData = entries.filter(e => e.rx !== null && e.tx !== null);
        const names = [...new Set(fullHistoryData.map(e => e.name))];
        const userList = document.getElementById("userList");
        userList.innerHTML = names.map(name => `<option value="${name}">`).join("");

        const today = new Date().toISOString().split('T')[0];
        document.getElementById("filterDate").value = today;
        applyFilters();

        new bootstrap.Modal(document.getElementById('historyModal')).show();
      }).fail(function () {
        alert("Ошибка при запросе к серверу");
      });
    });



    document.getElementById("themeToggle").addEventListener("click", function () {
      const isDark = document.body.classList.contains("bg-dark");

      <!-- Тело страницы -->
      document.body.classList.toggle("bg-dark", !isDark);
      document.body.classList.toggle("bg-light", isDark);

      <!-- Таблицы -->
      document.querySelectorAll("table").forEach(table => {
        table.classList.toggle("table-dark", !isDark);
        table.classList.toggle("table-light", isDark);
      });

      <!-- Шапки таблиц -->
      document.querySelectorAll("thead").forEach(head => {
        head.classList.toggle("table-dark", !isDark);
        head.classList.toggle("table-light", isDark);
      });


      <!-- Модалка -->
      document.querySelectorAll(".modal-content, .modal-header, .modal-body").forEach(el => {
        el.classList.toggle("bg-dark", !isDark);
        el.classList.toggle("text-light", !isDark);
        el.classList.toggle("bg-light", isDark);
        el.classList.toggle("text-dark", isDark);
      });

      <!-- Подвал таблиц (Total) -->
      document.querySelectorAll("tfoot, tr.total-row").forEach(el => {
        el.classList.toggle("table-dark", !isDark);
        el.classList.toggle("table-light", isDark);
      });

      <!-- Инпуты, селекты и текстовые поля -->
      document.querySelectorAll("input, select, textarea").forEach(el => {
        el.classList.toggle("bg-dark", !isDark);
        el.classList.toggle("text-light", !isDark);
        el.classList.toggle("bg-light", isDark);
        el.classList.toggle("text-dark", isDark);
        el.classList.toggle("border-light", !isDark);
        el.classList.toggle("border-dark", isDark);
      });

      <!-- Динамические элементы: календарь, выпадашки -->
      setTimeout(() => {
        document.querySelectorAll(".dropdown-menu, .select2-dropdown, datalist, .datepicker, .flatpickr-calendar, .ui-datepicker").forEach(el => {
          el.classList.toggle("bg-dark", !isDark);
          el.classList.toggle("text-light", !isDark);
          el.classList.toggle("bg-light", isDark);
          el.classList.toggle("text-dark", isDark);
        });
      }, 100);

    });




    document.getElementById("filterDate").addEventListener("input", applyFilters);
    document.getElementById("filterUser").addEventListener("input", applyFilters);
    document.getElementById("resetFilters").addEventListener("click", function () {
      document.getElementById("filterDate").value = "";
      document.getElementById("filterUser").value = "";
      renderHistoryTable(fullHistoryData);
    });
  });

    document.addEventListener("DOMContentLoaded", function () {
      fetchServerStatus();
      setInterval(fetchServerStatus, 3000); // обновление каждые 3 сек

      function fetchServerStatus() {
        fetch("/api/server-status")
          .then(r => r.json())
          .then(data => renderServerStatus(data));
      }


      function formatUptime(uptimeStr) {
        const uptime = new Date(uptimeStr);
        const now = new Date();
        const diffMs = now - uptime;

        if (isNaN(uptime.getTime()) || diffMs < 0) return "Unknown";
 
        const minutes = Math.floor(diffMs / 60000);
        const hours = Math.floor(minutes / 60);
        const days = Math.floor(hours / 24);

        const d = days > 0 ? `${days}d ` : "";
        const h = hours % 24 > 0 ? `${hours % 24}h ` : "";
        const m = `${minutes % 60}m`;

        return d + h + m;
      }



      function renderServerStatus(data) {
        const row = `
          <tr>
            <td>${data.mode}</td>
            <td>${data.status}</td>
            <td>${data.pingable}</td>
            <td>${data.clients}</td>
            <td>${data.total_rx} MB</td>
            <td>${data.total_tx} MB</td>
<!--        <td>${data.uptime}</td>   -->
            <td>${formatUptime(data.uptime)}</td>
            <td>${data.local_ip}</td>
            <td>${data.public_ip}</td>
          </tr>`;
        document.getElementById("server-status-body").innerHTML = row;
      }


//      let mapInitialized = false;
//      let mapInstance;

//      document.getElementById("toggleMapBtn").addEventListener("click", function () {
//        const section = document.getElementById("map-section");
//        const shown = section.style.display === "block";
//        section.style.display = shown ? "none" : "block";

//        if (!mapInitialized && !shown) {
//          mapInstance = L.map('map').setView([20, 0], 2);
//          L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
//            attribution: 'Map data © OpenStreetMap contributors'
//          }).addTo(mapInstance);
//          mapInitialized = true; 


      let mapInitialized = false;
      let mapInstance;
      let mapMarkers = [];

      document.getElementById("toggleMapBtn").addEventListener("click", function () {
        const section = document.getElementById("map-section");
        const shown = section.style.display === "block";
        section.style.display = shown ? "none" : "block";

        if (!mapInitialized && !shown) {
          mapInstance = L.map('map').setView([20, 0], 2);
          L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: 'Map data © OpenStreetMap contributors'
          }).addTo(mapInstance);
          mapInitialized = true;
        }

        <!-- загружаем маркеры каждый раз при показе -->
        if (!shown) {
          loadClientMarkers();
        }
      });

function loadClientMarkers() {
  console.log("Loading client markers...");
  mapMarkers.forEach(m => mapInstance.removeLayer(m));
  mapMarkers = [];

  fetch("/api/clients")
    .then(res => res.json())
    .then(data => {
      const clients = data.clients;

      clients.forEach(c => {
        if (!c.real_address) return;
        const ip = c.real_ip;

        fetch(`https://ipapi.co/${ip}/json/`)
          .then(res => res.json())
          .then(loc => {
            if (!loc.latitude || !loc.longitude) return;
            const marker = L.marker([loc.latitude, loc.longitude])
              .addTo(mapInstance)
              .bindPopup(`<strong>${c.common_name}</strong><br>${loc.city}, ${loc.country_name}`);
            mapMarkers.push(marker);
          })
          .catch(() => {});
      });
    });
}



    });

</script>

</body>
</html>
